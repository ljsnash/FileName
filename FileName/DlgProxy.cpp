
// DlgProxy.cpp : 实现文件
//

#include "stdafx.h"
#include "FileName.h"
#include "DlgProxy.h"
#include "FileNameDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CFileNameDlgAutoProxy

IMPLEMENT_DYNCREATE(CFileNameDlgAutoProxy, CCmdTarget)

CFileNameDlgAutoProxy::CFileNameDlgAutoProxy()
{
	EnableAutomation();
	
	// 为使应用程序在自动化对象处于活动状态时一直保持 
	//	运行，构造函数调用 AfxOleLockApp。
	AfxOleLockApp();

	// 通过应用程序的主窗口指针
	//  来访问对话框。  设置代理的内部指针
	//  指向对话框，并设置对话框的后向指针指向
	//  该代理。
	ASSERT_VALID(AfxGetApp()->m_pMainWnd);
	if (AfxGetApp()->m_pMainWnd)
	{
		ASSERT_KINDOF(CFileNameDlg, AfxGetApp()->m_pMainWnd);
		if (AfxGetApp()->m_pMainWnd->IsKindOf(RUNTIME_CLASS(CFileNameDlg)))
		{
			m_pDialog = reinterpret_cast<CFileNameDlg*>(AfxGetApp()->m_pMainWnd);
			m_pDialog->m_pAutoProxy = this;
		}
	}
}

CFileNameDlgAutoProxy::~CFileNameDlgAutoProxy()
{
	// 为了在用 OLE 自动化创建所有对象后终止应用程序，
	//	析构函数调用 AfxOleUnlockApp。
	//  除了做其他事情外，这还将销毁主对话框
	if (m_pDialog != NULL)
		m_pDialog->m_pAutoProxy = NULL;
	AfxOleUnlockApp();
}

void CFileNameDlgAutoProxy::OnFinalRelease()
{
	// 释放了对自动化对象的最后一个引用后，将调用
	// OnFinalRelease。  基类将自动
	// 删除该对象。  在调用该基类之前，请添加您的
	// 对象所需的附加清理代码。

	CCmdTarget::OnFinalRelease();
}

BEGIN_MESSAGE_MAP(CFileNameDlgAutoProxy, CCmdTarget)
END_MESSAGE_MAP()

BEGIN_DISPATCH_MAP(CFileNameDlgAutoProxy, CCmdTarget)
END_DISPATCH_MAP()

// 注意: 我们添加了对 IID_IFileName 的支持
//  以支持来自 VBA 的类型安全绑定。  此 IID 必须同附加到 .IDL 文件中的
//  调度接口的 GUID 匹配。

// {5C1DE705-C397-44B1-A140-2947147D6EBA}
static const IID IID_IFileName =
{ 0x5C1DE705, 0xC397, 0x44B1, { 0xA1, 0x40, 0x29, 0x47, 0x14, 0x7D, 0x6E, 0xBA } };

BEGIN_INTERFACE_MAP(CFileNameDlgAutoProxy, CCmdTarget)
	INTERFACE_PART(CFileNameDlgAutoProxy, IID_IFileName, Dispatch)
END_INTERFACE_MAP()

// IMPLEMENT_OLECREATE2 宏在此项目的 StdAfx.h 中定义
// {1BDDFF32-E9C1-478C-A710-B8DA6AD43D3C}
IMPLEMENT_OLECREATE2(CFileNameDlgAutoProxy, "FileName.Application", 0x1bddff32, 0xe9c1, 0x478c, 0xa7, 0x10, 0xb8, 0xda, 0x6a, 0xd4, 0x3d, 0x3c)


// CFileNameDlgAutoProxy 消息处理程序
